# pylint: disable=missing-function-docstring
""" Module for the base class for tags, and other simple tags """
from functools import cached_property
from typing import Any, Optional
from xml.etree.ElementTree import Element

from mpd_parser.attribute_parsers import get_bool_value, get_float_value, get_int_value, get_list_of_type
from mpd_parser.constants import KEYS_NOT_FOR_SETTING, LOOKUP_STR_FORMAT


class Tag:
    """Generic repr of mpd tag object"""

    def __init__(self, element: Element) -> None:
        self.element: Element = element
        self.tag_map: dict = {}

    def __setattr__(self, key: str, value: Any) -> None:
        """overload default setattr to make changes to the lxml element when attributes are changed by user"""
        super().__setattr__(key, value)
        # attributes that are not generated by lxml parsing
        if key in KEYS_NOT_FOR_SETTING:
            return

        # not an attribute, but part of the element
        if key == "text":
            self.element.text = value
            return

        # most attributes have a camel case name in DASH
        element_attrib_name = self.to_camel_case(key)

        # and those that don't, are mapped in tag_map
        if self.tag_map and key in self.tag_map:
            element_attrib_name = self.tag_map.get(key, element_attrib_name)

        # the value is None, remove attribute
        if not value:
            self.element.attrib.pop(element_attrib_name, None)
            return

        # list value should turn to a comma separated string
        if isinstance(value, list):
            self.element.attrib[element_attrib_name] = ",".join(map(str, value))
            return

        self.element.attrib[element_attrib_name] = str(value)

    @classmethod
    def to_camel_case(cls, snake_case_string: str) -> str:
        """convert snake_case to lowerCamelCase"""
        lead, *follow = snake_case_string.split("_")
        return "".join([lead, *map(str.capitalize, follow)])


class TextTag(Tag):
    """A tag that uses the text member frequently"""

    @cached_property
    def text(self) -> str:
        return self.element.text


class PSSH(Tag):
    """PSSH tag class"""

    @cached_property
    def pssh(self):
        return self.element.attrib.get("pssh")


class ContentProtection(Tag):
    """Tag for content protection"""

    def __init__(self, element):
        super().__init__(element)
        self.tag_map = {
            "default_key_id": "default_KId",
            "ns2_key_id": "ns2:default_KID",
            "cenc_default_kid": "cenc:default_KID",
        }

    @cached_property
    def scheme_id_uri(self):
        return self.element.attrib.get("schemeIdUri")

    @cached_property
    def value(self):
        return self.element.attrib.get("value")

    @cached_property
    def id(self):
        return self.element.attrib.get("id")

    @cached_property
    def default_key_id(self):
        return self.element.attrib.get("default_KId")

    @cached_property
    def ns2_key_id(self):
        return self.element.attrib.get("ns2:default_KID")

    @cached_property
    def cenc_default_kid(self):
        return self.element.attrib.get("cenc:default_KID")

    @cached_property
    def pssh(self):
        return PSSH(self.element.attrib.get("cenc:pssh"))


class Descriptor(Tag):
    """Reusable class for tag that have url, id and a value"""

    @cached_property
    def scheme_id_uri(self) -> str:
        return self.element.attrib.get("schemeIdUri")

    @cached_property
    def id(self) -> str:
        return self.element.attrib.get("id")

    @cached_property
    def value(self) -> str:
        return self.element.attrib.get("value")


class UTCTiming(Descriptor):
    """UTC Timing information tag representation"""


class AssetIdentifiers(Descriptor):
    """Asset Identifier tag"""


class ContentComponent(Tag):
    """Content Compoenet tag representation"""

    @cached_property
    def id(self):
        return get_int_value(self.element.attrib.get("id"))

    @cached_property
    def lang(self):
        return self.element.attrib.get("lang")

    @cached_property
    def content_type(self):
        return self.element.attrib.get("contentType")

    @cached_property
    def par(self):
        return self.element.attrib.get("par")

    @cached_property
    def accessibilities(self):
        return [
            Descriptor(member)
            for member in self.element.xpath(
                LOOKUP_STR_FORMAT.format(target="Accessibility")
            )
        ]

    @cached_property
    def roles(self):
        return [
            Descriptor(member)
            for member in self.element.xpath(LOOKUP_STR_FORMAT.format(target="Role"))
        ]

    @cached_property
    def ratings(self):
        return [
            Descriptor(member)
            for member in self.element.xpath(LOOKUP_STR_FORMAT.format(target="Rating"))
        ]

    @cached_property
    def viewpoints(self):
        return [
            Descriptor(member)
            for member in self.element.xpath(
                LOOKUP_STR_FORMAT.format(target="Viewpoint")
            )
        ]


class Title(TextTag):
    """Title tag representation"""


class Source(TextTag):
    """Source tag representation"""


class Location(TextTag):
    """Location tag representation"""


class Copyright(TextTag):
    """Copyright tag representation"""


class ProgramInfo(Tag):
    """Program information tag representation"""

    def __init__(self, element):
        super().__init__(element)
        self.tag_map = {"more_info_url": "moreInformationURL"}

    @cached_property
    def lang(self):
        return self.element.attrib.get("lang")

    @cached_property
    def more_info_url(self):
        return self.element.attrib.get("moreInformationURL")

    @cached_property
    def titles(self):
        return [
            Title(member)
            for member in self.element.xpath(LOOKUP_STR_FORMAT.format(target="Title"))
        ]

    @cached_property
    def sources(self):
        return [
            Source(member)
            for member in self.element.xpath(LOOKUP_STR_FORMAT.format(target="Source"))
        ]

    @cached_property
    def copy_rights(self):
        return [
            Copyright(member)
            for member in self.element.xpath(
                LOOKUP_STR_FORMAT.format(target="Copyright")
            )
        ]


class BaseURL(Tag):
    """Base URL tag representation"""

    @cached_property
    def text(self) -> str:
        return self.element.text

    @cached_property
    def service_location(self) -> str:
        return self.element.attrib.get("serviceLocation")

    @cached_property
    def byte_range(self) -> str:
        return self.element.attrib.get("byteRange")

    @cached_property
    def availability_time_offset(self) -> float:
        return get_float_value(self.element.attrib.get("availabilityTimeOffset"))

    @cached_property
    def availability_time_complete(self) -> Optional[bool]:
        return get_bool_value(self.element.attrib.get("availabilityTimeComplete"))


class URL(Tag):
    """Represent tags that have source-url and range attributes"""

    def __init__(self, element):
        super().__init__(element)
        self.tag_map = {"source_url": "sourceURL"}

    @cached_property
    def source_url(self):
        return self.element.attrib.get("sourceURL")

    @cached_property
    def range(self):
        return self.element.attrib.get("range")


class Event(TextTag):
    """Single event tag"""

    @cached_property
    def message_data(self):
        return self.element.attrib.get("messageData")

    @cached_property
    def presentation_time(self):
        return int(self.element.attrib.get("presentationTime"))

    @cached_property
    def duration(self):
        return int(self.element.attrib.get("duration"))

    @cached_property
    def id(self):
        return int(self.element.attrib.get("id"))


class EventStream(Descriptor):
    """Event Stream tag"""

    @cached_property
    def timescale(self):
        return self.element.attrib.get("timescale")

    @cached_property
    def events(self):
        return [
            Event(member)
            for member in self.element.xpath(LOOKUP_STR_FORMAT.format(target="Event"))
        ]


class Subset(Tag):
    """Subset tag"""

    @cached_property
    def id(self):
        return self.element.attrib.get("id")

    @cached_property
    def contains(self):
        return get_list_of_type(int, self.element.attrib.get("contains"))
